// index.js ‚Äî phi√™n b·∫£n ƒë√£ t√°i c·∫•u tr√∫c theo ‚ÄúQUY TR√åNH HO·∫†T ƒê·ªòNG‚Äù
// Node 18.x

import express from "express";
import bodyParser from "body-parser";
import { google } from "googleapis";
import Fuse from "fuse.js";
import _ from "lodash";

/** ========== C·∫§U H√åNH B·∫¢NG TTHC ========= **/
const SHEET_ID = process.env.SHEET_ID;
const SHEET_NAME = process.env.SHEET_NAME || "TTHC";

/** ========== APP ========= **/
const app = express();
app.use(bodyParser.json());

/** ========== TI·ªÜN √çCH ========= **/
const VN_NORM = (str) =>
  (str || "")
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D")
    .toLowerCase()
    .replace(/\s+/g, " ")
    .trim();

const TOKENIZE = (s) =>
  VN_NORM(s)
    .split(" ")
    .filter((t) => t && t.length > 1); // b·ªè token 1 k√Ω t·ª±

const COLUMN_MAP = {
  ma_thu_tuc: "ma_thu_tuc",
  so_quyet_dinh: "so_quyet_dinh",
  thu_tuc: "thu_tuc",
  cap_thuc_hien: "cap_thuc_hien",
  loai_thu_tuc: "loai_thu_tuc",
  linh_vuc: "linh_vuc",
  trinh_tu: "trinh_tu",
  hinh_thuc_nop: "hinh_thuc_nop",
  thoi_han: "thoi_han",
  phi_le_phi: "phi_le_phi",
  thanh_phan_hs: "thanh_phan_hs",
  doi_tuong: "doi_tuong",
  co_quan_thuc_hien: "co_quan_thuc_hien",
  noi_tiep_nhan: "noi_tiep_nhan",
  ket_qua: "ket_qua",
  can_cu: "can_cu",
  dieu_kien: "dieu_kien",
};

const INFO_KEY_TO_COL = {
  thoi_gian: "thoi_han",
  thoi_han: "thoi_han",
  trinh_tu: "trinh_tu",
  le_phi: "phi_le_phi",
  phi_le_phi: "phi_le_phi",
  thanh_phan_hs: "thanh_phan_hs",
  ho_so: "thanh_phan_hs",
  doi_tuong: "doi_tuong",
  co_quan: "co_quan_thuc_hien",
  noi_nop: "noi_tiep_nhan",
  ket_qua: "ket_qua",
  can_cu: "can_cu",
  dieu_kien: "dieu_kien",
  hinh_thuc_nop: "hinh_thuc_nop",
  linh_vuc: "linh_vuc",
  cap_thuc_hien: "cap_thuc_hien",
  loai_thu_tuc: "loai_thu_tuc",
};

let cache = { rows: [], lastLoad: 0, nameMap: new Map() };

/** ƒê·ªçc Google Sheet + t·∫°o ch·ªâ m·ª•c */
async function loadSheet() {
  const now = Date.now();
  if (now - cache.lastLoad < 5 * 60 * 1000 && cache.rows.length) return;

  const auth = await google.auth.getClient({
    scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
  });
  const sheets = google.sheets({ version: "v4", auth });

  const range = `${SHEET_NAME}!A1:Q`;
  const { data } = await sheets.spreadsheets.values.get({
    spreadsheetId: SHEET_ID,
    range,
  });

  const [header, ...rows] = data.values || [];
  const idx = Object.fromEntries(header.map((h, i) => [h, i]));
  const toObj = (r) =>
    Object.fromEntries(Object.keys(COLUMN_MAP).map((k) => [k, r[idx[k]] || ""]));

  const parsed = rows.map(toObj).filter((r) => r.thu_tuc);
  parsed.forEach((r) => {
    r._norm = VN_NORM(r.thu_tuc);
    r._tokens = TOKENIZE(r.thu_tuc);
  });

  // B·∫£n ƒë·ªì ‚Äút√™n g·ªëc ‚Üí record‚Äù ƒë·ªÉ nh·∫≠n khi UI tr·∫£ v·ªÅ text chip
  const nameMap = new Map();
  for (const r of parsed) {
    nameMap.set(r.thu_tuc.trim(), r);
  }

  cache = { rows: parsed, lastLoad: now, nameMap };
}

/** T√¨m th·ªß t·ª•c theo truy v·∫•n ‚ÄúAND-token‚Äù + ch·∫•m ƒëi·ªÉm ƒë·ªô ph·ªß */
function searchProcedures(qRaw, limit = 20) {
  const tokens = TOKENIZE(qRaw);
  if (!tokens.length) return [];

  const hits = [];
  for (const r of cache.rows) {
    // t·∫•t c·∫£ token ƒë·ªÅu ph·∫£i hi·ªán di·ªán
    const ok = tokens.every((t) => r._norm.includes(t));
    if (!ok) continue;
    // ƒëi·ªÉm = t·ªïng chi·ªÅu d√†i token tr√πng / chi·ªÅu d√†i t√™n chu·∫©n h√≥a
    const overlap =
      tokens.reduce((sum, t) => sum + (r._norm.includes(t) ? t.length : 0), 0) /
      Math.max(1, r._norm.length);
    hits.push({ score: 1 - overlap, item: r }); // score nh·ªè h∆°n = t·ªët h∆°n
  }
  hits.sort((a, b) => a.score - b.score);
  return hits.slice(0, limit);
}

/** ======= UI helpers (Dialogflow Messenger richContent) ======= **/

// 1) Danh s√°ch th·ªß t·ª•c d·∫°ng LIST (ƒë·∫πp cho ti√™u ƒë·ªÅ d√†i)
function listForProcedures(results, title = "**G·ª£i √Ω th·ªß t·ª•c**") {
  const items = results.slice(0, 20).map((r) => {
    const item = r.item || r;
    return {
      type: "list",
      title: item.thu_tuc, // ng∆∞·ªùi d√πng click -> tr·∫£ text = title
    };
  });
  return {
    fulfillmentMessages: [
      {
        payload: {
          richContent: [
            [
              { type: "description", title, text: ["Ch·ªçn m·ªôt th·ªß t·ª•c b√™n d∆∞·ªõi:"] },
              ...items,
            ],
          ],
        },
      },
    ],
  };
}

// 2) Menu chip chi ti·∫øt c·ªßa m·ªôt th·ªß t·ª•c (c√≥ Back + H∆∞·ªõng d·∫´n n·ªôp)
function chipsForInfo(proc) {
  const defs = [
    ["üóÇÔ∏è Th√†nh ph·∫ßn h·ªì s∆°", "thanh_phan_hs"],
    ["‚è±Ô∏è Th·ªùi h·∫°n gi·∫£i quy·∫øt", "thoi_han"],
    ["üß≠ Tr√¨nh t·ª± th·ª±c hi·ªán", "trinh_tu"],
    ["üí≥ Ph√≠, l·ªá ph√≠", "phi_le_phi"],
    ["üìç N∆°i ti·∫øp nh·∫≠n", "noi_tiep_nhan"],
    ["üè¢ C∆° quan th·ª±c hi·ªán", "co_quan_thuc_hien"],
    ["üë• ƒê·ªëi t∆∞·ª£ng", "doi_tuong"],
    ["üìÑ K·∫øt qu·∫£", "ket_qua"],
    ["‚öñÔ∏è CƒÉn c·ª© ph√°p l√Ω", "can_cu"],
    ["‚úÖ ƒêi·ªÅu ki·ªán", "dieu_kien"],
    ["üåê H√¨nh th·ª©c n·ªôp", "hinh_thuc_nop"],
    ["üìå H∆∞·ªõng d·∫´n n·ªôp TTHC", "_huongdan_"], // ƒë·∫∑c bi·ªát
  ];

  const options = defs
    .filter(([_, col]) => col === "_huongdan_" || (proc[col] || "").trim().length)
    .map(([label, col]) => ({
      text: label,
      event: {
        name: "XEM_CHI_TIET_TTHC",
        languageCode: "vi",
        parameters: { ma_thu_tuc: proc.ma_thu_tuc, info_key: col },
      },
    }));

  // n√∫t Back
  options.unshift({
    text: "‚¨ÖÔ∏è Quay l·∫°i th·ªß t·ª•c",
    event: {
      name: "BACK_TO_MENU",
      languageCode: "vi",
      parameters: { ma_thu_tuc: proc.ma_thu_tuc },
    },
  });

  return {
    payload: {
      richContent: [[{ type: "chips", options }]],
    },
  };
}

/** N·ªôi dung ‚ÄúH∆∞·ªõng d·∫´n n·ªôp TTHC‚Äù */
function huongDanNopCards() {
  return {
    payload: {
      richContent: [
        [
          {
            type: "description",
            title: "N·ªôp tr·ª±c ti·∫øp",
            text: [
              "N·ªôp h·ªì s∆° tr·ª±c ti·∫øp t·∫°i B·ªô ph·∫≠n m·ªôt c·ª≠a S·ªü X√¢y d·ª±ng S∆°n La - Trung t√¢m Ph·ª•c v·ª• h√†nh ch√≠nh c√¥ng t·ªânh.",
              "ƒê·ªãa ch·ªâ: T·∫ßng 1, To√† nh√† 7 t·∫ßng, Trung t√¢m L∆∞u tr·ªØ l·ªãch s·ª≠ t·ªânh S∆°n La (Khu Qu·∫£ng tr∆∞·ªùng T√¢y B·∫Øc, ph∆∞·ªùng T√¥ Hi·ªáu, t·ªânh S∆°n La) ho·∫∑c Trung t√¢m ph·ª•c v·ª• h√†nh ch√≠nh c√¥ng x√£, ph∆∞·ªùng g·∫ßn nh·∫•t.",
            ],
          },
          {
            type: "description",
            title: "D·ªãch v·ª• b∆∞u ch√≠nh",
            text: [
              "B·∫°n c√≥ th·ªÉ g·ª≠i h·ªì s∆° / nh·∫≠n k·∫øt qu·∫£ qua b∆∞u ƒëi·ªán.",
              "C√°c b∆∞·ªõc: 1) Chu·∫©n b·ªã h·ªì s∆°; 2) ƒê·∫øn b∆∞u ƒëi·ªán; 3) Ch·ªçn h√¨nh th·ª©c (g·ª≠i h·ªì s∆° / nh·∫≠n k·∫øt qu·∫£ / c·∫£ hai); 4) Nh·∫≠n k·∫øt qu·∫£ t·∫°i ƒë·ªãa ch·ªâ ƒë√£ ƒëƒÉng k√Ω.",
            ],
          },
          {
            type: "description",
            title: "N·ªôp h·ªì s∆° tr·ª±c tuy·∫øn",
            text: [
              "Truy c·∫≠p: https://dichvucong.gov.vn/p/home/dvc-dich-vu-cong-truc-tuyen-ds.html?pCoQuanId=426103",
              "C√°c b∆∞·ªõc (r√∫t g·ªçn): 1) ƒêƒÉng nh·∫≠p VNeID; 2) T√¨m t√™n th·ªß t·ª•c; 3) Ch·ªçn c∆° quan th·ª±c hi·ªán; 4) ƒêi·ªÅn th√¥ng tin + ƒë√≠nh k√®m h·ªì s∆°; 5) Ch·ªçn h√¨nh th·ª©c nh·∫≠n k·∫øt qu·∫£; 6) N·ªôp l·ªá ph√≠ (n·∫øu c√≥); 7) Ki·ªÉm tra v√† ho√†n t·∫•t.",
              "H∆∞·ªõng d·∫´n chi ti·∫øt: https://binhdanhocvusxd.com/huongdansudungdichvuso/abc",
            ],
          },
        ],
      ],
    },
  };
}

/** ======= X·ª¨ L√ù CH√çNH ======= **/
app.post("/fulfillment", async (req, res) => {
  try {
    await loadSheet();

    const body = req.body;
    const params = _.get(body, "queryResult.parameters", {});
    const queryText = _.get(body, "queryResult.queryText", "").trim();

    // Ki·ªÉm tra event (khi click chip)
    const ev = _.get(body, "originalDetectIntentRequest.payload.event", null);
    const evName = ev?.name || "";
    const evParams = ev?.parameters || {};

    /** ===== 1) S·ª∞ KI·ªÜN: CH·ªåN TH·ª¶ T·ª§C ===== */
    if (evName === "CHON_THU_TUC") {
      const ma = evParams.ma_thu_tuc?.toString() || "";
      const proc = cache.rows.find((r) => r.ma_thu_tuc === ma);
      if (!proc) return res.json(listForProcedures([])); // ph√≤ng h·ªù

      const payload = chipsForInfo(proc);
      const card = {
        payload: {
          richContent: [
            [
              {
                type: "description",
                title: `**${proc.thu_tuc}**`,
                text: [
                  `Lƒ©nh v·ª±c: ${proc.linh_vuc || "-"}`,
                  `C·∫•p th·ª±c hi·ªán: ${proc.cap_thuc_hien || "-"}`,
                ],
              },
            ],
          ],
        },
      };
      return res.json({ fulfillmentMessages: [card, payload] });
    }

    /** ===== 2) S·ª∞ KI·ªÜN: XEM CHI TI·∫æT ===== */
    if (evName === "XEM_CHI_TIET_TTHC") {
      const ma = evParams.ma_thu_tuc?.toString() || "";
      const infoKey = (evParams.info_key || "").toString();
      const proc = cache.rows.find((r) => r.ma_thu_tuc === ma);
      if (!proc) return res.json(listForProcedures([]));

      // H∆∞·ªõng d·∫´n n·ªôp TTHC (ƒë·∫∑c bi·ªát)
      if (infoKey === "_huongdan_") {
        const title = { payload: { richContent: [[{ type: "description", title: `**${proc.thu_tuc}**`, text: [] }]] } };
        return res.json({
          fulfillmentMessages: [title, huongDanNopCards(), chipsForInfo(proc)],
        });
      }

      const col = COLUMN_MAP[infoKey];
      const value = (col && proc[col]) ? proc[col] : "Ch∆∞a c√≥ d·ªØ li·ªáu.";
      const fm = {
        payload: {
          richContent: [
            [
              { type: "description", title: `**${proc.thu_tuc}**`, text: [] },
              {
                type: "description",
                title: `**${infoKey.replaceAll("_", " ").toUpperCase()}**`,
                text: [value],
              },
            ],
          ],
        },
      };
      return res.json({ fulfillmentMessages: [fm, chipsForInfo(proc)] });
    }

    /** ===== 3) S·ª∞ KI·ªÜN: BACK ===== */
    if (evName === "BACK_TO_MENU") {
      const ma = evParams.ma_thu_tuc?.toString() || "";
      const proc = cache.rows.find((r) => r.ma_thu_tuc === ma);
      if (!proc) return res.json(listForProcedures([]));
      const card = {
        payload: {
          richContent: [
            [
              {
                type: "description",
                title: `**${proc.thu_tuc}**`,
                text: [
                  `Lƒ©nh v·ª±c: ${proc.linh_vuc || "-"}`,
                  `C·∫•p th·ª±c hi·ªán: ${proc.cap_thuc_hien || "-"}`,
                ],
              },
            ],
          ],
        },
      };
      return res.json({ fulfillmentMessages: [card, chipsForInfo(proc)] });
    }

    /** ===== 4) D√í TEXT = NH√ÉN CHIP (ph√≤ng tr∆∞·ªùng h·ª£p UI kh√¥ng g·ª≠i event) ===== */
    const exactProc = cache.nameMap.get(queryText);
    if (exactProc) {
      const card = {
        payload: {
          richContent: [
            [
              {
                type: "description",
                title: `**${exactProc.thu_tuc}**`,
                text: [
                  `Lƒ©nh v·ª±c: ${exactProc.linh_vuc || "-"}`,
                  `C·∫•p th·ª±c hi·ªán: ${exactProc.cap_thuc_hien || "-"}`,
                ],
              },
            ],
          ],
        },
      };
      return res.json({ fulfillmentMessages: [card, chipsForInfo(exactProc)] });
    }

    /** ===== 5) X·ª¨ L√ù √ù ƒê·ªäNH TRA C·ª®U  ===== */
    const intent = _.get(body, "queryResult.intent.displayName", "");
    if (intent === "TraCuuTTHC") {
      const rawProc = (params.procedure_name || "").toString();
      const infoRaw = (params.TTHC_Info || "").toString().toLowerCase();
      const infoKey = INFO_KEY_TO_COL[infoRaw] || infoRaw;

      // T√¨m th·ªß t·ª•c theo text ng∆∞·ªùi d√πng
      let proc = null;
      if (rawProc) {
        const best = searchProcedures(rawProc, 1);
        if (best.length) proc = best[0].item;
      } else if (queryText) {
        const best = searchProcedures(queryText, 1);
        if (best.length) proc = best[0].item;
      }

      if (!proc) {
        const results = searchProcedures(queryText || rawProc);
        if (!results.length) {
          return res.json({
            fulfillmentText:
              "M√¨nh ch∆∞a nh·∫≠n ra th·ªß t·ª•c b·∫°n c·∫ßn. B·∫°n m√¥ t·∫£ r√µ h∆°n t√™n th·ªß t·ª•c nh√©?",
          });
        }
        return res.json(listForProcedures(results));
      }

      // C√≥ info -> tr·∫£ th·∫≥ng chi ti·∫øt (L·ª±a ch·ªçn 2)
      if (infoKey && COLUMN_MAP[infoKey]) {
        const value = proc[infoKey] || "Ch∆∞a c√≥ d·ªØ li·ªáu.";
        const fm = {
          payload: {
            richContent: [
              [
                { type: "description", title: `**${proc.thu_tuc}**`, text: [] },
                {
                  type: "description",
                  title: `**${infoKey.replaceAll("_", " ").toUpperCase()}**`,
                  text: [value],
                },
              ],
            ],
          },
        };
        const chipXemThem = {
          payload: {
            richContent: [
              [
                {
                  type: "chips",
                  options: [
                    {
                      text: "T√¨m hi·ªÉu th√¥ng tin kh√°c v·ªÅ th·ªß t·ª•c n√†y",
                      event: {
                        name: "BACK_TO_MENU",
                        languageCode: "vi",
                        parameters: { ma_thu_tuc: proc.ma_thu_tuc },
                      },
                    },
                  ],
                },
              ],
            ],
          },
        };
        return res.json({ fulfillmentMessages: [fm, chipXemThem] });
      }

      // Kh√¥ng c√≥ info -> menu chip chi ti·∫øt (L·ª±a ch·ªçn 1)
      const card = {
        payload: {
          richContent: [
            [
              {
                type: "description",
                title: `**${proc.thu_tuc}**`,
                text: [
                  `Lƒ©nh v·ª±c: ${proc.linh_vuc || "-"}`,
                  `C·∫•p th·ª±c hi·ªán: ${proc.cap_thuc_hien || "-"}`,
                ],
              },
            ],
          ],
        },
      };
      return res.json({ fulfillmentMessages: [card, chipsForInfo(proc)] });
    }

    if (intent === "TRA_CUU_TU_KHOA" || intent === "Default Fallback Intent") {
      // V·ªõi keyword ng·∫Øn ‚Üí g·ª£i √Ω danh s√°ch (l·ªçc ch·∫∑t)
      const base = params.keyword?.toString() || queryText;
      const results = searchProcedures(base);
      if (!results.length) {
        return res.json({
          fulfillmentText:
            "M√¨nh ch∆∞a nh·∫≠n ra th·ªß t·ª•c b·∫°n c·∫ßn. B·∫°n m√¥ t·∫£ r√µ h∆°n t√™n th·ªß t·ª•c nh√©?",
        });
      }
      return res.json(listForProcedures(results));
    }

    // M·∫∑c ƒë·ªãnh
    return res.json({
      fulfillmentText:
        "Xin l·ªói, h·ªá th·ªëng ƒëang b·∫≠n. B·∫°n th·ª≠ h·ªèi l·∫°i t√™n th·ªß t·ª•c nh√©!",
    });
  } catch (e) {
    console.error(e);
    return res.json({
      fulfillmentText:
        "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë khi ƒë·ªçc d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.",
    });
  }
});

app.get("/", (_, res) => res.send("SXDSL TTHC Webhook OK"));
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log("Listening on " + PORT));
