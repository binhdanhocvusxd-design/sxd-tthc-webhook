import express from "express";
import bodyParser from "body-parser";
import { google } from "googleapis";
import Fuse from "fuse.js";
import _ from "lodash";

const SHEET_ID = process.env.SHEET_ID;
const SHEET_NAME = process.env.SHEET_NAME || "TTHC";

const app = express();
app.use(bodyParser.json());

// ---------- Utils ----------
const norm = (s) =>
  (s || "")
    .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d").replace(/ƒê/g, "D")
    .toLowerCase().replace(/\s+/g, " ").trim();

const TITLE = (s) => `**${s}**`;

const INFO_KEY_TO_COL = {
  thoi_gian: "thoi_han",
  thoi_han: "thoi_han",
  trinh_tu: "trinh_tu",
  le_phi: "phi_le_phi",
  phi_le_phi: "phi_le_phi",
  thanh_phan_hs: "thanh_phan_hs",
  ho_so: "thanh_phan_hs",
  doi_tuong: "doi_tuong",
  co_quan: "co_quan_thuc_hien",
  noi_nop: "noi_tiep_nhan",
  ket_qua: "ket_qua",
  can_cu: "can_cu",
  dieu_kien: "dieu_kien",
  hinh_thuc_nop: "hinh_thuc_nop",
  linh_vuc: "linh_vuc",
  cap_thuc_hien: "cap_thuc_hien",
  loai_thu_tuc: "loai_thu_tuc"
};

const CHIP_INFO_DEFS = [
  ["üì• Quay l·∫°i th·ªß t·ª•c", "__BACK__"],
  ["üìÑ Th√†nh ph·∫ßn h·ªì s∆°", "thanh_phan_hs"],
  ["‚è±Ô∏è Th·ªùi h·∫°n gi·∫£i quy·∫øt", "thoi_han"],
  ["üß≠ Tr√¨nh t·ª± th·ª±c hi·ªán", "trinh_tu"],
  ["üí≥ Ph√≠, l·ªá ph√≠", "phi_le_phi"],
  ["üìç N∆°i ti·∫øp nh·∫≠n", "noi_tiep_nhan"],
  ["üè¢ C∆° quan th·ª±c hi·ªán", "co_quan_thuc_hien"],
  ["üë• ƒê·ªëi t∆∞·ª£ng", "doi_tuong"],
  ["üìÑ K·∫øt qu·∫£", "ket_qua"],
  ["‚öñÔ∏è CƒÉn c·ª© ph√°p l√Ω", "can_cu"],
  ["‚úÖ ƒêi·ªÅu ki·ªán", "dieu_kien"],
  ["üåê H√¨nh th·ª©c n·ªôp", "hinh_thuc_nop"],
  ["üìö H∆∞·ªõng d·∫´n n·ªôp TTHC", "__GUIDE__"]
];

// cache
let cache = { rows: [], fuse: null, last: 0 };

async function loadSheet() {
  const now = Date.now();
  if (now - cache.last < 5 * 60 * 1000 && cache.rows.length) return;

  const auth = await google.auth.getClient({
    scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"]
  });
  const sheets = google.sheets({ version: "v4", auth });

  const range = `${SHEET_NAME}!A1:Q`;
  const { data } = await sheets.spreadsheets.values.get({ spreadsheetId: SHEET_ID, range });

  const [header, ...rows] = data.values || [];
  const idx = Object.fromEntries(header.map((h, i) => [h, i]));
  const pick = (r, k) => (r[idx[k]] || "").toString();

  const parsed = rows.map(r => {
    const obj = {
      ma_thu_tuc: pick(r, "ma_thu_tuc"),
      so_quyet_dinh: pick(r, "so_quyet_dinh"),
      thu_tuc: pick(r, "thu_tuc"),
      cap_thuc_hien: pick(r, "cap_thuc_hien"),
      loai_thu_tuc: pick(r, "loai_thu_tuc"),
      linh_vuc: pick(r, "linh_vuc"),
      trinh_tu: pick(r, "trinh_tu"),
      hinh_thuc_nop: pick(r, "hinh_thuc_nop"),
      thoi_han: pick(r, "thoi_han"),
      phi_le_phi: pick(r, "phi_le_phi"),
      thanh_phan_hs: pick(r, "thanh_phan_hs"),
      doi_tuong: pick(r, "doi_tuong"),
      co_quan_thuc_hien: pick(r, "co_quan_thuc_hien"),
      noi_tiep_nhan: pick(r, "noi_tiep_nhan"),
      ket_qua: pick(r, "ket_qua"),
      can_cu: pick(r, "can_cu"),
      dieu_kien: pick(r, "dieu_kien")
    };
    obj._thu_tuc_norm = norm(obj.thu_tuc);
    return obj;
  }).filter(x => x.thu_tuc);

  cache = {
    rows: parsed,
    fuse: new Fuse(parsed, {
      keys: ["thu_tuc", "_thu_tuc_norm"],
      includeScore: true,
      threshold: 0.42,
      ignoreLocation: true,
      minMatchCharLength: 3
    }),
    last: now
  };
}

const sessionName = (body, ctx) => `${body.session}/contexts/${ctx}`;

// ---------- Renderers ----------
function cardProcedure(proc) {
  return {
    type: "description",
    title: TITLE(proc.thu_tuc),
    text: [
      `Lƒ©nh v·ª±c: ${proc.linh_vuc || "-"}`,
      `C·∫•p th·ª±c hi·ªán: ${proc.cap_thuc_hien || "-"}`
    ]
  };
}

function buttonsInfo(proc) {
  const options = CHIP_INFO_DEFS
    .filter(([, key]) => key.startsWith("__") || (proc[key] || "").trim().length)
    .map(([label, key]) => ({ text: label }));

  return [{ type: "chips", options }];
}

function chipsProcedures(list) {
  const options = list.slice(0, 10).map(item => ({ text: item.thu_tuc }));
  return [{ type: "chips", options }];
}

// ---------- Helpers with Context ----------
function setContext(res, body, name, lifespan, parameters) {
  const ctx = {
    name: sessionName(body, name),
    lifespanCount: lifespan,
    parameters
  };
  res.outputContexts = res.outputContexts || [];
  res.outputContexts.push(ctx);
}

function findSelectedFromContext(body, ctxName) {
  const ctx = (body.queryResult.outputContexts || []).find(c =>
    c.name.endsWith(`/contexts/${ctxName}`)
  );
  return ctx;
}

// ---------- Main Handlers ----------
function buildGuideCards() {
  const lines = [
    {
      type: "description",
      title: TITLE("H∆∞·ªõng d·∫´n n·ªôp th·ªß t·ª•c h√†nh ch√≠nh"),
      text: ["Ch·ªçn 1 h√¨nh th·ª©c b√™n d∆∞·ªõi:"]
    },
    {
      type: "description",
      title: "N·ªôp tr·ª±c ti·∫øp",
      text: [
        "N·ªôp h·ªì s∆° tr·ª±c ti·∫øp t·∫°i B·ªô ph·∫≠n m·ªôt c·ª≠a S·ªü X√¢y d·ª±ng S∆°n La - Trung t√¢m Ph·ª•c v·ª• h√†nh ch√≠nh c√¥ng t·ªânh.",
        "ƒê·ªãa ch·ªâ: T·∫ßng 1, To√† nh√† 7 t·∫ßng, Trung t√¢m L∆∞u tr·ªØ l·ªãch s·ª≠ t·ªânh S∆°n La (Khu Qu·∫£ng tr∆∞·ªùng T√¢y B·∫Øc, ph∆∞·ªùng T√¥ Hi·ªáu, t·ªânh S∆°n La) ho·∫∑c Trung t√¢m ph·ª•c v·ª• h√†nh ch√≠nh c√¥ng x√£, ph∆∞·ªùng g·∫ßn nh·∫•t."
      ]
    },
    {
      type: "description",
      title: "D·ªãch v·ª• b∆∞u ch√≠nh",
      text: [
        "B·∫°n c√≥ th·ªÉ th·ª±c hi·ªán qua b∆∞u ƒëi·ªán (g·ª≠i h·ªì s∆° / nh·∫≠n k·∫øt qu·∫£ / ho·∫∑c c·∫£ hai).",
        "1) Chu·∫©n b·ªã h·ªì s∆°; 2) ƒê·∫øn b∆∞u ƒëi·ªán; 3) Giao d·ªãch (ch·ªçn h√¨nh th·ª©c); 4) Nh·∫≠n k·∫øt qu·∫£ t·∫°i nh√†."
      ]
    },
    {
      type: "description",
      title: "N·ªôp h·ªì s∆° tr·ª±c tuy·∫øn",
      text: [
        "Truy c·∫≠p: https://dichvucong.gov.vn/p/home/dvc-dich-vu-cong-truc-tuyen-ds.html?pCoQuanId=426103",
        "ƒêƒÉng nh·∫≠p VNeID, t√¨m t√™n th·ªß t·ª•c, ch·ªçn S·ªü X√¢y d·ª±ng S∆°n La, n·ªôp h·ªì s∆° & l·ªá ph√≠ (n·∫øu c√≥)."
      ]
    }
  ];
  return lines;
}

function reply(payload, extra = {}) {
  const o = {
    fulfillmentMessages: [{ payload }],
    ...extra
  };
  return o;
}

function replyText(text, extra = {}) {
  return {
    fulfillmentText: text,
    ...extra
  };
}

function matchTopProcedures(q) {
  const QQ = norm(q);
  const scored = cache.fuse.search(QQ);
  // n·∫øu kh√¥ng c√≥ th√¨ th·ª≠ filter ch·ª©a c·ª•m t·ª´
  if (!scored.length) {
    const contains = cache.rows.filter(r => r._thu_tuc_norm.includes(QQ));
    return contains.slice(0, 10);
  }
  // l·ªçc ƒëi·ªÉm ƒë·ªß t·ªët ho·∫∑c l·∫•y top ~10
  return scored
    .filter(x => x.score <= 0.6)
    .slice(0, 10)
    .map(x => x.item);
}

// ---------- Fulfillment ----------
app.post("/fulfillment", async (req, res) => {
  try {
    await loadSheet();

    const body = req.body;
    const intent = _.get(body, "queryResult.intent.displayName", "");
    const params = _.get(body, "queryResult.parameters", {});
    const queryText = _.get(body, "queryResult.queryText", "");

    // ∆Øu ti√™n b·∫Øt h√†nh vi "click chip" qua Context tr∆∞·ªõc
    // 1) ƒêang ch·ªù ch·ªçn th·ªß t·ª•c
    const ctxProc = findSelectedFromContext(body, "await_select_proc");
    if (ctxProc) {
      // user g√µ/b·∫•m m·ªôt l·ª±a ch·ªçn th·ªß t·ª•c
      const options = ctxProc.parameters?.options || [];
      const hit = options.find(o => norm(o.title) === norm(queryText));
      if (hit) {
        // ƒë√£ ch·ªçn ƒë√∫ng th·ªß t·ª•c -> hi·ªÉn th·ªã card + chips info
        const proc = cache.rows.find(r => r.ma_thu_tuc === hit.ma_thu_tuc);
        const payload = { richContent: [[cardProcedure(proc)], ...buttonsInfo(proc)] };

        // l∆∞u Context ƒëang xem chi ti·∫øt th·ªß t·ª•c + menu info
        const out = {};
        setContext(out, body, "current_proc", 10, { ma_thu_tuc: proc.ma_thu_tuc });
        setContext(out, body, "await_select_info", 10, {
          info: CHIP_INFO_DEFS.filter(([label, key]) => key.startsWith("__") || (proc[key] || "").trim().length)
            .map(([label, key]) => ({ label, key }))
        });

        return res.json(reply(payload, out));
      }
      // Kh√¥ng kh·ªõp ‚Äì b·ªè qua ƒë·ªÉ xu·ªëng logic t·ªïng qu√°t
    }

    // 2) ƒêang ch·ªù ch·ªçn lo·∫°i th√¥ng tin
    const ctxInfo = findSelectedFromContext(body, "await_select_info");
    if (ctxInfo) {
      const current = findSelectedFromContext(body, "current_proc");
      const ma = current?.parameters?.ma_thu_tuc;
      const proc = cache.rows.find(r => r.ma_thu_tuc === ma);

      if (proc) {
        const opts = ctxInfo.parameters?.info || [];
        const hitInfo = opts.find(o => norm(o.label) === norm(queryText));
        if (hitInfo) {
          if (hitInfo.key === "__BACK__") {
            // Quay l·∫°i menu info
            const payload = { richContent: [[cardProcedure(proc)], ...buttonsInfo(proc)] };
            const out = {};
            setContext(out, body, "await_select_info", 10, { info: opts });
            return res.json(reply(payload, out));
          }
          if (hitInfo.key === "__GUIDE__") {
            const payload = { richContent: [buildGuideCards()] };
            const out = {};
            // v·∫´n gi·ªØ context info ƒë·ªÉ ti·∫øp t·ª•c Back n·∫øu c·∫ßn
            setContext(out, body, "await_select_info", 10, { info: opts });
            setContext(out, body, "current_proc", 10, { ma_thu_tuc: proc.ma_thu_tuc });
            return res.json(reply(payload, out));
          }

          const col = INFO_KEY_TO_COL[hitInfo.key] || hitInfo.key;
          const value = (proc[col] || "Ch∆∞a c√≥ d·ªØ li·ªáu.").toString();
          const payload = {
            richContent: [[
              { type: "description", title: TITLE(proc.thu_tuc), text: [] },
              { type: "description", title: TITLE(hitInfo.label), text: [value] },
            ], ...buttonsInfo(proc)]
          };
          const out = {};
          setContext(out, body, "await_select_info", 10, { info: opts });
          setContext(out, body, "current_proc", 10, { ma_thu_tuc: proc.ma_thu_tuc });
          return res.json(reply(payload, out));
        }
      }
      // kh√¥ng kh·ªõp ‚Äì r∆°i ti·∫øp xu·ªëng logic t·ªïng qu√°t
    }

    // ====== Nh√°nh theo intent / param ======

    // 1) Ng∆∞·ªùi d√πng ƒë∆∞a keyword (intent TRA_CUU_TU_KHOA) ‚Äì t√¨m & g·ª£i √Ω th·ªß t·ª•c
    if (intent === "TRA_CUU_TU_KHOA") {
      const key = params.keyword || queryText;
      const list = matchTopProcedures(key);

      if (!list.length) {
        return res.json(replyText("M√¨nh ch∆∞a t√¨m ƒë∆∞·ª£c th·ªß t·ª•c ph√π h·ª£p. B·∫°n m√¥ t·∫£ c·ª• th·ªÉ h∆°n nh√©?"));
      }

      const payload = { richContent: [[
        { type: "description", title: TITLE("G·ª£i √Ω th·ªß t·ª•c"), text: ["Ch·ªçn m·ªôt th·ªß t·ª•c b√™n d∆∞·ªõi:"] },
      ], ...[chipsProcedures(list)]] };

      const out = {};
      setContext(out, body, "await_select_proc", 5, {
        options: list.map(p => ({ title: p.thu_tuc, ma_thu_tuc: p.ma_thu_tuc })),
        original_query: key
      });
      return res.json(reply(payload, out));
    }

    // 2) Ng∆∞·ªùi d√πng h·ªèi t·ª± nhi√™n: c√≥/kh√¥ng info_key (intent TraCuuTTHC)
    if (intent === "TraCuuTTHC") {
      const infoRaw = (params.TTHC_Info || "").toString().toLowerCase();
      const info_key = INFO_KEY_TO_COL[infoRaw] || infoRaw || null;

      const textForSearch =
        params.procedure_name || params.keyword || queryText;

      const results = matchTopProcedures(textForSearch);

      // Kh√¥ng c√≥ k·∫øt qu·∫£ ‚Üí fallback
      if (!results.length) {
        return res.json(replyText("M√¨nh ch∆∞a nh·∫≠n ra th·ªß t·ª•c b·∫°n c·∫ßn. B·∫°n m√¥ t·∫£ r√µ h∆°n t√™n th·ªß t·ª•c nh√©?"));
      }

      // N·∫øu c√≥ nhi·ªÅu th·ªß t·ª•c t∆∞∆°ng t·ª± ‚Üí g·ª£i √Ω cho ch·ªçn
      if (results.length > 1 && !info_key) {
        const payload = { richContent: [[
          { type: "description", title: TITLE("G·ª£i √Ω th·ªß t·ª•c"), text: ["Ch·ªçn m·ªôt th·ªß t·ª•c b√™n d∆∞·ªõi:"] },
        ], ...[chipsProcedures(results)]] };

        const out = {};
        setContext(out, body, "await_select_proc", 5, {
          options: results.map(p => ({ title: p.thu_tuc, ma_thu_tuc: p.ma_thu_tuc })),
          original_query: textForSearch
        });
        return res.json(reply(payload, out));
      }

      // L·∫•y th·ªß t·ª•c t·ªët nh·∫•t
      const proc = results[0];

      // N·∫øu c√≥ info ‚Üí tr·∫£ th·∫≥ng n·ªôi dung
      if (info_key) {
        const col = INFO_KEY_TO_COL[info_key] || info_key;
        const value = (proc[col] || "Ch∆∞a c√≥ d·ªØ li·ªáu.").toString();
        const payload = {
          richContent: [[
            { type: "description", title: TITLE(proc.thu_tuc), text: [] },
            { type: "description", title: TITLE(info_key.replaceAll("_", " ")), text: [value] },
          ], ...buttonsInfo(proc)]
        };
        const out = {};
        setContext(out, body, "current_proc", 10, { ma_thu_tuc: proc.ma_thu_tuc });
        setContext(out, body, "await_select_info", 10, {
          info: CHIP_INFO_DEFS.filter(([label, key]) => key.startsWith("__") || (proc[key] || "").trim().length)
            .map(([label, key]) => ({ label, key }))
        });
        return res.json(reply(payload, out));
      }

      // Kh√¥ng c√≥ info ‚Üí hi·ªÉn th·ªã menu info
      const payload = { richContent: [[cardProcedure(proc)], ...buttonsInfo(proc)] };
      const out = {};
      setContext(out, body, "current_proc", 10, { ma_thu_tuc: proc.ma_thu_tuc });
      setContext(out, body, "await_select_info", 10, {
        info: CHIP_INFO_DEFS.filter(([label, key]) => key.startsWith("__") || (proc[key] || "").trim().length)
          .map(([label, key]) => ({ label, key }))
      });
      return res.json(reply(payload, out));
    }

    // 3) EVTs qua event (n·∫øu widget t∆∞∆°ng th√≠ch) ‚Äì v·∫´n h·ªó tr·ª£
    if (intent === "EVT_CHON_THU_TUC" || intent === "CHON_THU_TUC") {
      const ma = params.ma_thu_tuc;
      const proc = cache.rows.find(r => r.ma_thu_tuc === ma);
      if (!proc) return res.json(replyText("M√¨nh ch∆∞a nh·∫≠n ra th·ªß t·ª•c b·∫°n ch·ªçn, b·∫°n th·ª≠ n√≥i r√µ h∆°n nh√©?"));

      const payload = { richContent: [[cardProcedure(proc)], ...buttonsInfo(proc)] };
      const out = {};
      setContext(out, body, "current_proc", 10, { ma_thu_tuc: proc.ma_thu_tuc });
      setContext(out, body, "await_select_info", 10, {
        info: CHIP_INFO_DEFS.filter(([label, key]) => key.startsWith("__") || (proc[key] || "").trim().length)
          .map(([label, key]) => ({ label, key }))
      });
      return res.json(reply(payload, out));
    }

    if (intent === "EVT_XEM_CHI_TIET_TTHC" || intent === "XEM_CHI_TIET_TTHC") {
      const ma = params.ma_thu_tuc;
      const key = params.info_key;
      const proc = cache.rows.find(r => r.ma_thu_tuc === ma);
      if (!proc) return res.json(replyText("M√¨nh ch∆∞a nh·∫≠n ra th·ªß t·ª•c b·∫°n ch·ªçn, b·∫°n th·ª≠ n√≥i r√µ h∆°n nh√©?"));

      if (key === "__BACK__") {
        const payload = { richContent: [[cardProcedure(proc)], ...buttonsInfo(proc)] };
        const out = {};
        setContext(out, body, "current_proc", 10, { ma_thu_tuc: proc.ma_thu_tuc });
        setContext(out, body, "await_select_info", 10, {
          info: CHIP_INFO_DEFS.filter(([label, k]) => k.startsWith("__") || (proc[k] || "").trim().length)
            .map(([label, k]) => ({ label, key: k }))
        });
        return res.json(reply(payload, out));
      }

      const col = INFO_KEY_TO_COL[key] || key;
      const value = (proc[col] || "Ch∆∞a c√≥ d·ªØ li·ªáu.").toString();
      const payload = {
        richContent: [[
          { type: "description", title: TITLE(proc.thu_tuc), text: [] },
          { type: "description", title: TITLE(key.replaceAll("_", " ")), text: [value] }
        ], ...buttonsInfo(proc)]
      };
      const out = {};
      setContext(out, body, "current_proc", 10, { ma_thu_tuc: proc.ma_thu_tuc });
      setContext(out, body, "await_select_info", 10, {
        info: CHIP_INFO_DEFS.filter(([label, k]) => k.startsWith("__") || (proc[k] || "").trim().length)
          .map(([label, k]) => ({ label, key: k }))
      });
      return res.json(reply(payload, out));
    }

    // 4) Fallback (c√≥ th·ªÉ l√† postback text kh√¥ng kh·ªõp) ‚Üí th·ª≠ b·∫Øt l·∫ßn cu·ªëi b·∫±ng context
    if (intent === "Default Fallback Intent") {
      // Th·ª≠ xem c√≥ ƒëang ƒë·ª©ng ·ªü ‚Äúch·ªçn th·ªß t·ª•c‚Äù hay ‚Äúch·ªçn info‚Äù
      if (ctxProc || ctxInfo) {
        // c·ªë g·∫Øng match nh∆∞ ph·∫ßn tr√™n (ƒë√£ l√†m). N·∫øu t·ªõi ƒë√¢y nghƒ©a l√† kh√¥ng kh·ªõp.
        return res.json(replyText("M√¨nh ch∆∞a nh·∫≠n ra l·ª±a ch·ªçn c·ªßa b·∫°n. B·∫°n b·∫•m l·∫°i trong c√°c g·ª£i √Ω nh√©!"));
      }
      return res.json(replyText("C√¢u h·ªèi c·ªßa b·∫°n kh√¥ng li√™n quan ƒë·∫øn lƒ©nh v·ª±c TTHC, xin vui l√≤ng ƒë·∫∑t l·∫°i c√¢u h·ªèi. Xin c·∫£m ∆°n!"));
    }

    // N·∫øu r∆°i ngo√†i t·∫•t c·∫£
    return res.json(replyText("M√¨nh ch∆∞a hi·ªÉu y√™u c·∫ßu. B·∫°n th·ª≠ di·ªÖn ƒë·∫°t l·∫°i gi√∫p m√¨nh nh√©!"));
  } catch (err) {
    console.error(err);
    return res.json({ fulfillmentText: "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë khi ƒë·ªçc d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i." });
  }
});

app.get("/", (_, res) => res.send("SXDSL TTHC Webhook OK"));
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log("Listening on " + PORT));
